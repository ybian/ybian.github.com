<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Power of Two]]></title>
  <link href="http://ybian.github.com/atom.xml" rel="self"/>
  <link href="http://ybian.github.com/"/>
  <updated>2013-04-22T09:07:29+08:00</updated>
  <id>http://ybian.github.com/</id>
  <author>
    <name><![CDATA[Bian Ying]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Quicksilver action to create new reminders]]></title>
    <link href="http://ybian.github.com/blog/2012/08/15/a-quicksilver-action-to-create-new-reminders/"/>
    <updated>2012-08-15T15:27:00+08:00</updated>
    <id>http://ybian.github.com/blog/2012/08/15/a-quicksilver-action-to-create-new-reminders</id>
    <content type="html"><![CDATA[<p>I recently switched to Reminder.app as my ToDo management tool, after upgrading to Mountain Lion. The only thing I missed is a hotkey window
to create a new reminder instantly. As always, I turn to Quicksilver for this kind of things.</p>

<p>So, I wrote a Quicksilver action (in Ruby). The following is the screenshot of how it works.
<img src="http://ybian.github.com/images/make_new_reminder.jpg"></p>

<!-- more -->


<p>And here is the source code. Just drop it under <code>~/Library/Application Support/Quicksilver/Actions</code> and make it executable by using <code>chmod 755 &lt;script&gt;</code> in terminal (thanks to Luke for pointing it out), then restart Quicksilver.</p>

<figure class='code'><figcaption><span> (NewReminder.rb)</span> <a href='http://ybian.github.com/downloads/code/NewReminder.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="c1"># as of 0.7.0, chronic has problem with ruby 1.9.3. So use system ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rubygems&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;chronic&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">AS_GET_LIST</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span>
</span><span class='line'><span class="sh">on run argv</span>
</span><span class='line'><span class="sh">  set listStr to &quot;&quot;</span>
</span><span class='line'><span class="sh">  tell application &quot;Reminders&quot;</span>
</span><span class='line'><span class="sh">    repeat with listIndex from 1 to (count of list)</span>
</span><span class='line'><span class="sh">        set oneList to list listIndex</span>
</span><span class='line'><span class="sh">        if listStr is equal to &quot;&quot; then</span>
</span><span class='line'><span class="sh">            set listStr to (name of oneList)</span>
</span><span class='line'><span class="sh">        else</span>
</span><span class='line'><span class="sh">            set listStr to listStr &amp; &quot;|&quot; &amp; (name of oneList)</span>
</span><span class='line'><span class="sh">        end if</span>
</span><span class='line'><span class="sh">    end repeat</span>
</span><span class='line'><span class="sh">  end tell</span>
</span><span class='line'><span class="sh">  return listStr</span>
</span><span class='line'><span class="sh">end run</span>
</span><span class='line'><span class="no">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="no">AS_MAKE_REMINDER</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span>
</span><span class='line'><span class="sh">on run argv</span>
</span><span class='line'><span class="sh">  set theList to item 1 of argv</span>
</span><span class='line'><span class="sh">  set theName to item 2 of argv</span>
</span><span class='line'><span class="sh">  if item 3 of argv equal to &quot;&quot; then</span>
</span><span class='line'><span class="sh">    set theDate to &quot;&quot;</span>
</span><span class='line'><span class="sh">  else</span>
</span><span class='line'><span class="sh">    set theDate to date(item 3 of argv)</span>
</span><span class='line'><span class="sh">  end if</span>
</span><span class='line'>
</span><span class='line'><span class="sh">  tell application &quot;Reminders&quot;</span>
</span><span class='line'><span class="sh">    tell list theList</span>
</span><span class='line'><span class="sh">      if theDate equal to &quot;&quot; then</span>
</span><span class='line'><span class="sh">        make new reminder with properties {name:theName, body:&quot;&quot;}</span>
</span><span class='line'><span class="sh">      else</span>
</span><span class='line'><span class="sh">        make new reminder with properties {name:theName, body:&quot;&quot;, due date:theDate}</span>
</span><span class='line'><span class="sh">      end if</span>
</span><span class='line'><span class="sh">    end tell</span>
</span><span class='line'><span class="sh">  end tell</span>
</span><span class='line'><span class="sh">end run</span>
</span><span class='line'><span class="no">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="n">lists</span> <span class="o">=</span> <span class="sb">`osascript -e &#39;</span><span class="si">#{</span><span class="no">AS_GET_LIST</span><span class="si">}</span><span class="sb">&#39;`</span>
</span><span class='line'><span class="n">lists</span> <span class="o">=</span> <span class="n">lists</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span> <span class="c1"># strip \n, and get [&quot;Life&quot;, &quot;Work&quot;, ...]</span>
</span><span class='line'>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">strip</span>
</span><span class='line'><span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="o">!</span><span class="n">line</span>
</span><span class='line'>
</span><span class='line'><span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;^&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">date_str</span> <span class="o">=</span> <span class="n">parts</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">due_date</span> <span class="o">=</span> <span class="no">Chronic</span><span class="o">.</span><span class="n">parse</span> <span class="n">date_str</span>
</span><span class='line'><span class="n">due_date_str</span> <span class="o">=</span> <span class="n">due_date</span> <span class="p">?</span> <span class="n">due_date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/%d/%Y %I:%M%p&quot;</span><span class="p">)</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="n">body</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">w</span><span class="o">|</span> <span class="n">w</span><span class="o">.</span><span class="n">start_with?</span> <span class="s2">&quot;@&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">delete</span> <span class="n">list</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="n">lists</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">list</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/^@/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">eql?</span> <span class="n">l</span><span class="o">.</span><span class="n">upcase</span><span class="p">}</span> <span class="k">if</span> <span class="n">list</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="n">lists</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="k">if</span> <span class="o">!</span><span class="n">list</span>
</span><span class='line'>
</span><span class='line'><span class="sb">`osascript -e &#39;</span><span class="si">#{</span><span class="no">AS_MAKE_REMINDER</span><span class="si">}</span><span class="sb">&#39; </span><span class="si">#{</span><span class="n">list</span><span class="si">}</span><span class="sb"> &quot;</span><span class="si">#{</span><span class="n">words</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="sb">&quot; &quot;</span><span class="si">#{</span><span class="n">due_date_str</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="vg">$?</span><span class="o">.</span><span class="n">to_i</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="sb">`terminal-notifier -message &quot;</span><span class="si">#{</span><span class="n">words</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="sb">&quot; -title &quot;</span><span class="si">#{</span><span class="s2">&quot;Reminder @&quot;</span> <span class="o">+</span> <span class="n">list</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">due_date</span> <span class="p">?</span> <span class="n">date_str</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="si">}</span><span class="sb">&quot; -group new_reminder -activate &quot;com.apple.Reminders&quot;`</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="sb">`terminal-notifier -message &quot;Oops... Something was wrong&quot; -title &quot;New Reminder&quot; -group new_reminder -activate &quot;com.apple.Reminders&quot;`</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some notes about this script:</p>

<ul>
<li><p>The script is written in Ruby, and it uses 2 gems: <code>chronic</code> for parsing human readable date string and <code>terminal-notifier</code> for send notification using Notification Center. As <code>chronic</code> cannot work well with Ruby 1.9.3 as of this writing,
I forced the script to be executed using system ruby (/usr/bin/ruby) which is of version 1.8.7 in OS X 10.8. Anyway, you need to install those 2 gems using <code>gem install chronic</code> and <code>gem install terminal-notifier</code>.</p></li>
<li><p>As it uses Notification Center, it should only work on OS X 10.8+. But it is easy to be tweaked to drop notification or use other notification services like Growl.</p></li>
<li><p>Some AppleScript code is embedded and executed by <code>osascript</code> to interact with Reminder.app.
This script could be written entirely in AppleScript, but I chose Ruby + AppleScript way as
it is much easier to write most part of the logic in Ruby.</p></li>
<li><p>The usage of this action: assuming it is correctly installed, launch QS, hit &#8220;.&#8221; to enter text mode, write your reminder message, hit tab key to focus on the 2nd pane, and choose &#8220;NewReminder&#8221; action. Your reminder should be created.</p></li>
<li><p>You can set list and/or due date in your message. The list name should be prefixed with <code>@</code>. The due date string can be any human readable format understandable by <a href="https://github.com/mojombo/chronic">chronic</a>. Due date must be prefixed with <code>^</code> and be the last part of the message.
For example, <code>call my mom @life ^tomorrow 6pm</code> will create a reminder <code>call my mom</code> in the <code>life</code> list and set due date to 6pm of tomorrow.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[make spritesheet generation automatic using makefile and texturepacker]]></title>
    <link href="http://ybian.github.com/blog/2012/08/07/make-spritesheet-generation-automatic-using-makefile-and-texturepacker/"/>
    <updated>2012-08-07T11:23:00+08:00</updated>
    <id>http://ybian.github.com/blog/2012/08/07/make-spritesheet-generation-automatic-using-makefile-and-texturepacker</id>
    <content type="html"><![CDATA[<p>In the current game that I am developing, I need to update spritesheets frequently to incorporate changes from my artist. As I was using zwoptex as the SpriteSheet generation tool,
the process that I followed was:</p>

<p>Open the zss file -> Select all -> Delete -> Import -> Select all -> Publish (assuming I had configured the publish location correctly)</p>

<p>It usually only takes one minute or two, but it becomes very tedious if you repeat it more than 3 times. So I decided to find a way to automate the process, and I found it.</p>

<!-- more -->


<p>The key to the solution is TexturePacker - a better SpirteSheet generation tool that supports command line. TexturePacker has a lot of amazing features, but the killing feature for me is
command line support, which makes automation easy to implement. Yes, you can easily write a shell script to automate your process of regenerating your spritesheets. But you can make the process
more seamless by integrating it into a Makefile that can automatically be called when you build your game in Xcode.</p>

<p>Read below for detail steps to accomplish this.</p>

<h3>Create a new target</h3>

<ul>
<li><p>Select your project root node in Xcode left navigator (1), and click &#8220;Add target&#8221; (2), in the pop-up dialog, choose <code>OS X -&gt; Other -&gt; External build system</code>, name it whatever you want.</p></li>
<li><p>Select the newly created target (3), leave build tool as <code>/usr/bin/make</code> and arguments unchanged, configure &#8216;Directory&#8217; to wherever you plan to put your Makefile (4). In my case, I set it to &#8220;Resources&#8221; folder under my project.</p></li>
</ul>


<p><img src="http://ybian.github.com/images/create-target-in-xcode.jpg"></p>

<h3>Add target dependencies to your existing target</h3>

<ul>
<li>Select your existing target, switch to &#8220;Build Phases&#8221; tab, expand the first section titled &#8220;Target Dependencies&#8221;, click &#8220;+&#8221; icon, choose the target you created in the previous step.</li>
</ul>


<h3>Add the Makefile</h3>

<ul>
<li>Create a new file named <code>Makefile</code>, add it to the directory you configured in the step &#8220;Create a new target&#8221;. And, edit the file content to something similar to below:</li>
</ul>


<figure class='code'><figcaption><span>An example of Makefile  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">_IPADHD</span>    <span class="o">=</span> ipadhd
</span><span class='line'><span class="nv">_IPAD</span>     <span class="o">=</span> ipad
</span><span class='line'><span class="nv">_HD</span>   <span class="o">=</span> iphonehd
</span><span class='line'><span class="nv">_NORMAL</span>   <span class="o">=</span> iphone
</span><span class='line'><span class="nv">TP</span>    <span class="o">=</span> /usr/local/bin/texturepacker
</span><span class='line'><span class="nv">CV</span>    <span class="o">=</span> /opt/local/bin/convert
</span><span class='line'><span class="nv">TP_OPTS</span>   <span class="o">=</span> --data <span class="k">$(</span>basename <span class="nv">$@</span><span class="k">)</span>.plist --sheet <span class="nv">$@</span> --format cocos2d --algorithm Basic --no-trim
</span><span class='line'><span class="nv">SPRITESHEET_DIR</span> <span class="o">=</span> ../../assets/SpriteSheet
</span><span class='line'>
</span><span class='line'>all:SpriteSheet.png
</span><span class='line'>
</span><span class='line'>SpriteSheet-ipadhd.png:<span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPADHD<span class="k">)</span>/*.png <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPADHD<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>TP<span class="k">)</span> <span class="k">$(</span>TP_OPTS<span class="k">)</span> <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPADHD<span class="k">)</span>/*.png
</span><span class='line'>
</span><span class='line'>SpriteSheet-ipad.png:SpriteSheet-ipadhd.png
</span><span class='line'>  -rm <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPAD<span class="k">)</span>/*
</span><span class='line'>  <span class="k">for </span>x in <span class="nv">$$</span><span class="o">(</span>ls <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPADHD<span class="k">)</span>/*.png<span class="o">)</span>; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>      <span class="k">$(</span>CV<span class="k">)</span> <span class="nv">$$</span>x -resize 50% <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPAD<span class="k">)</span>/<span class="nv">$$</span><span class="o">{</span>x##*/<span class="o">}</span>; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  <span class="k">$(</span>TP<span class="k">)</span> <span class="k">$(</span>TP_OPTS<span class="k">)</span> <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPAD<span class="k">)</span>/*.png
</span><span class='line'>
</span><span class='line'>SpriteSheet-hd.png:SpriteSheet-ipad.png
</span><span class='line'>  -rm <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_HD<span class="k">)</span>/*
</span><span class='line'>  <span class="k">for </span>x in <span class="nv">$$</span><span class="o">(</span>ls <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_IPAD<span class="k">)</span>/*.png<span class="o">)</span>; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>      <span class="k">$(</span>CV<span class="k">)</span> <span class="nv">$$</span>x -resize 85% <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_HD<span class="k">)</span>/<span class="nv">$$</span><span class="o">{</span>x##*/<span class="o">}</span>; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  <span class="k">$(</span>TP<span class="k">)</span> <span class="k">$(</span>TP_OPTS<span class="k">)</span> <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_HD<span class="k">)</span>/*.png
</span><span class='line'>
</span><span class='line'>SpriteSheet.png:SpriteSheet-hd.png
</span><span class='line'>  -rm <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_NORMAL<span class="k">)</span>/*
</span><span class='line'>  <span class="k">for </span>x in <span class="nv">$$</span><span class="o">(</span>ls <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_HD<span class="k">)</span>/*.png<span class="o">)</span>; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>      <span class="k">$(</span>CV<span class="k">)</span> <span class="nv">$$</span>x -resize 50% <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_NORMAL<span class="k">)</span>/<span class="nv">$$</span><span class="o">{</span>x##*/<span class="o">}</span>; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  <span class="k">$(</span>TP<span class="k">)</span> <span class="k">$(</span>TP_OPTS<span class="k">)</span> <span class="k">$(</span>SPRITESHEET_DIR<span class="k">)</span>/<span class="k">$(</span>_NORMAL<span class="k">)</span>/*.png
</span></code></pre></td></tr></table></div></figure>


<p>This Makefile set a &#8220;source directory&#8221; as the prerequisite of the target <code>SpriteSheet-ipadhd.png</code>, whenever a change is made to the directory, this target will be updated, using the TexturePacker
command in that rule. Besides, there are 3 other rules for -ipad, -hd and normal spritesheets as well, whenever the <code>-ipadhd</code> version gets updated, other versions of SpriteSheets need to be updated
as well. In those rules, <code>convert</code> command is used to resize images before passing through them to TexturePacker.</p>

<h3>Done</h3>

<p>With this setup, it now becomes a breeze to update your spritesheet: just throw your new images into your assets directory and then rebuild your game. Everything will be done automatically for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bring the best of two worlds - xvim]]></title>
    <link href="http://ybian.github.com/blog/2012/08/01/bring-the-best-of-two-worlds-xvim/"/>
    <updated>2012-08-01T17:32:00+08:00</updated>
    <id>http://ybian.github.com/blog/2012/08/01/bring-the-best-of-two-worlds-xvim</id>
    <content type="html"><![CDATA[<p>I have been a happy Vim user for more than 10 years. I use Vim for almost all my text editing work, including
system administration, command line editing, blog writing and coding, except for one thing: iOS/Mac programming,
for which I never feel comfortable to do in Vim. <!-- more -->Instead, I use Xcode. Xcode is the natural choice for iOS/Mac
programming as it has some neat features that other apps can hardly beat with, for example, the integration of
interface builder and app distribution, and more importantly, code completion (I cannot imagine coding objective-C
without code completion).</p>

<p>Xcode rocks in every aspect, except for&#8230; the editor. It lacks a lot of shortcuts that are in your Vim muscle memory.
e.g: <code>dd</code> to delete a line, <code>yy</code> to copy a line. Is it possible to replace the editor with a Vim simulator?</p>

<p>I did not think so until I came across <a href="https://github.com/JugglerShu/XVim/">XVim</a> recently.</p>

<p>Per its <code>READEME</code>:</p>

<blockquote><p>XVim is a Vim plugin for Xcode. The plugin intends to offer a compelling Vim experience without the need to give up any Xcode features.</p></blockquote>

<p>It really works as advertised. With this plugin installed per instructions, I can finally turn the Xcode editor to behave just like Vim, and
all Xcode goodnesses are still there!</p>

<p>There is an issue, although. As the <code>timeoutlen</code> option is not implemented by that plugin, multiple keystroke mapping does
not work well in XVim, which is a problem to me, as I always have <code>;;</code> mapped to <code>ESC</code>.</p>

<p>I spent a couple of hours fixing this. My code changes have been sent out as a pull request <a href="https://github.com/JugglerShu/XVim/pull/252">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[make quicksilver switch keyboard automatically]]></title>
    <link href="http://ybian.github.com/blog/2012/08/01/make-quicksilver-switch-keyboard-automatically/"/>
    <updated>2012-08-01T16:29:00+08:00</updated>
    <id>http://ybian.github.com/blog/2012/08/01/make-quicksilver-switch-keyboard-automatically</id>
    <content type="html"><![CDATA[<p>If you are a Quicksilver fan and also a non-English native (like me), the following situation must sound
familiar to you: you activated Quicksilver, started to type a couple of letters and immediately
realized that you forgot to switch to English keyboard first, then you switched to English keyboard and
continued your workflow. Wouldn&#8217;t your life be easier if Quicksilver can switch to English keyboard automatically
once it is activated?</p>

<!-- more -->


<p>Personally, I would love to have this feature so my workflow would not interrupted. Someone else share this same
opinion with me. There is a feature request on Quicksilver&#8217;s issue tracking system on github.</p>

<p>What really triggered me to implement this feature rather than waiting for others to do that is a &#8220;Alfred vs Quicksilver&#8221; debate
in a local forum. An alfred user claimed that &#8220;my alfred can automatically switch my keyboard to English once activated. Can your
Quicksilver do that?&#8221;. Oh..no, at least not yet. But I got the motivation to implement this, just for my favorite mac tool to
compete better against others.</p>

<p>With the help of nice guys at <a href="https://github.com/quicksilver">Quicksilver</a>, I sent out the pull request and made a lot of changes
per comments. It is still not merged yet, but I have the confidence that it will be. ;-)</p>

<p>The link to my pull request is <a href="https://github.com/quicksilver/Quicksilver/pull/987">here</a>. And the following is peak view of how
this feature works:</p>

<p><img src="http://ybian.github.com/images/quicksilver-keyboard-switch.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A simple way to 'cd' to current finder folder]]></title>
    <link href="http://ybian.github.com/blog/2012/08/01/a-simple-way-to-cd-to-current-finder-folder/"/>
    <updated>2012-08-01T11:33:00+08:00</updated>
    <id>http://ybian.github.com/blog/2012/08/01/a-simple-way-to-cd-to-current-finder-folder</id>
    <content type="html"><![CDATA[<p>On my mac, I need to spend a lot of time working with Finder and iTerm (or Terminal), and I find
it tedious to switch between those 2 apps as I often need to open the working directory of iTerm inside Finder, and the opposite, cd to the current Finder folder in terminal.</p>

<!-- more -->


<p>The former is easy to accomplish by using the magic <code>open .</code> command in terminal and I have been using it for years. Very handy!
For the latter, I have tried several solutions but was never satisfied. Here are some solutions I tried before:</p>

<ul>
<li><em>Pathfinder</em>: Yes, pathfinder is a nice replacement to Finder and has terminal integration. It has a lot of features, but what I really need is a little piece. So this is an overkill to me.</li>
<li><em>Visor (TotalTerminal) / iTerm Hotkey Window</em>: Both can be used to open an overlay terminal window, but not be able to <code>cd</code> to the current folder automatically. And, it was not flexible to be enforced to work
in that overlay window. I want to work in whatever terminal session that is already opened in my iTerm!</li>
<li><em>Go2Shell</em>: This is a little program which allows you to open the current finder folder in terminal. It works but it is still not flexible either. It always opens a new terminal window, and cannot let you work
in your existing session.</li>
</ul>


<p>So I decided to implement my own solution. It turns out to be easier that what I expected. What I need is to write is a little AppleScript and create a shell alias.</p>

<p>First, I need to write a little AppleScript code as the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try
</span><span class='line'>    tell application "Finder"
</span><span class='line'>        set this_folder to (folder of the front window) as alias
</span><span class='line'>    end tell
</span><span class='line'>on error
</span><span class='line'>    set the this_folder to path to desktop folder as alias
</span><span class='line'>end try
</span><span class='line'>
</span><span class='line'>set full_path to POSIX path of this_folder</span></code></pre></td></tr></table></div></figure>


<p>Write the above code in a text editor and save it. I saved it as <code>~/bin/extra/GetCurrentFinderFolder.scpt</code>.</p>

<p>The script is self-explanatory, if you execute it in command line via <code>osascript /path/to/your_script</code>, it would output the path of the opened folder in Finder.</p>

<p>Next, create a shell alias and add it in your <code>.bashrc</code> or <code>.zshrc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias cdf="cd \"\`osascript ~/bin/extra/GetCurrentFinderFolder.scpt\`\""</span></code></pre></td></tr></table></div></figure>


<p>Note that you have to carefully escape the quote marks like above.</p>

<p>Now, you can use the handy <code>cdf</code> alias wherever you want in your terminal! I have been using this for a month and really enjoy it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This is a test post]]></title>
    <link href="http://ybian.github.com/blog/2012/07/31/this-is-a-test-post/"/>
    <updated>2012-07-31T17:36:00+08:00</updated>
    <id>http://ybian.github.com/blog/2012/07/31/this-is-a-test-post</id>
    <content type="html"><![CDATA[<p><em>View the <a href="http://github.github.com/github-flavored-markdown/sample_content.html">source of this content</a>.</em></p>

<p>Let&#8217;s get the whole &#8220;linebreak&#8221; thing out of the way. The next paragraph contains two phrases separated by a single newline character:</p>

<p>Roses are red
Violets are blue</p>

<!-- more -->


<p>The next paragraph has the same phrases, but now they are separated by two spaces and a newline character:</p>

<p>Roses are red<br/>
Violets are blue</p>

<p>Oh, and one thing I cannot stand is the mangling of words with multiple underscores in them like perform_complicated_task or do_this_and_do_that_and_another_thing.</p>

<h2>A bit of the GitHub spice</h2>

<p>In addition to the changes in the previous section, certain references are auto-linked:</p>

<ul>
<li>SHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2</li>
<li>User@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2</li>
<li>User/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2</li>
<li>#Num: #1</li>
<li>User/#Num: mojombo#1</li>
<li>User/Project#Num: mojombo/god#1</li>
</ul>


<p>These are dangerous goodies though, and we need to make sure email addresses don&#8217;t get mangled:</p>

<p>My email addy is tom@github.com.</p>

<h2>Math is hard, let&#8217;s go shopping</h2>

<p>In first grade I learned that 5 > 3 and 2 &lt; 7. Maybe some arrows. 1 -> 2 -> 3. 9 &lt;- 8 &lt;- 7.</p>

<p>Triangles man! a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></p>

<h2>We all like making lists</h2>

<p>The above header should be an H2 tag. Now, for a list of fruits:</p>

<ul>
<li>Red Apples</li>
<li>Purple Grapes</li>
<li>Green Kiwifruits</li>
</ul>


<p>Let&#8217;s get crazy:</p>

<ol>
<li><p>This is a list item with two paragraphs. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.</p>

<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.</p></li>
<li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li>
</ol>


<p>What about some code <strong>in</strong> a list? That&#8217;s insane, right?</p>

<ol>
<li><p>In Ruby you can map like this:</p>

<pre><code> ['a', 'b'].map { |x| x.uppercase }
</code></pre></li>
<li><p>In Rails, you can do a shortcut:</p>

<pre><code> ['a', 'b'].map(&amp;:uppercase)
</code></pre></li>
</ol>


<p>Some people seem to like definition lists</p>

<dl>
  <dt>Lower cost</dt>
  <dd>The new version of this product costs significantly less than the previous one!</dd>
  <dt>Easier to use</dt>
  <dd>We&#8217;ve changed the product so that it&#8217;s much easier to use!</dd>
</dl>


<h2>I am a robot</h2>

<p>Maybe you want to print <code>robot</code> to the console 1000 times. Why not?</p>

<pre><code>def robot_invasion
  puts("robot " * 1000)
end
</code></pre>

<p>You see, that was formatted as code because it&#8217;s been indented by four spaces.</p>

<p>How about we throw some angle braces and ampersands in there?</p>

<pre><code>&lt;div class="footer"&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre>

<h2>Set in stone</h2>

<p>Preformatted blocks are useful for ASCII art:</p>

<pre>
             ,-. 
    ,     ,-.   ,-. 
   / \   (   )-(   ) 
   \ |  ,.>-(   )-< 
    \|,' (   )-(   ) 
     Y ___`-'   `-' 
     |/__/   `-' 
     | 
     | 
     |    -hrr- 
  ___|_____________ 
</pre>


<h2>Playing the blame game</h2>

<p>If you need to blame someone, the best way to do so is by quoting them:</p>

<blockquote><p>I, at any rate, am convinced that He does not throw dice.</p></blockquote>

<p>Or perhaps someone a little less eloquent:</p>

<blockquote><p>I wish you&#8217;d have given me this written question ahead of time so I
could plan for it&#8230; I&#8217;m sure something will pop into my head here in
the midst of this press conference, with all the pressure of trying to
come up with answer, but it hadn&#8217;t yet&#8230;</p>

<p>I don&#8217;t want to sound like
I have made no mistakes. I&#8217;m confident I have. I just haven&#8217;t - you
just put me under the spot here, and maybe I&#8217;m not as quick on my feet
as I should be in coming up with one.</p></blockquote>

<h2>Table for two</h2>

<table>
  <tr>
    <th>ID</th><th>Name</th><th>Rank</th>
  </tr>
  <tr>
    <td>1</td><td>Tom Preston-Werner</td><td>Awesome</td>
  </tr>
  <tr>
    <td>2</td><td>Albert Einstein</td><td>Nearly as awesome</td>
  </tr>
</table>


<h2>Crazy linking action</h2>

<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>
]]></content>
  </entry>
  
</feed>
